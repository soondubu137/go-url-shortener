// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	urlMapFieldNames          = builder.RawFieldNames(&UrlMap{})
	urlMapRows                = strings.Join(urlMapFieldNames, ",")
	urlMapRowsExpectAutoSet   = strings.Join(stringx.Remove(urlMapFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	urlMapRowsWithPlaceHolder = strings.Join(stringx.Remove(urlMapFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	urlMapModel interface {
		Insert(ctx context.Context, data *UrlMap) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UrlMap, error)
		FindOneByMd5(ctx context.Context, md5 string) (*UrlMap, error)
		FindOneByShortUrl(ctx context.Context, shortUrl string) (*UrlMap, error)
		Update(ctx context.Context, data *UrlMap) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUrlMapModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UrlMap struct {
		Id          int64     `db:"id"`
		CreateAt    time.Time `db:"create_at"`
		CreateBy    string    `db:"create_by"`
		IsDeleted   bool      `db:"is_deleted"`
		OriginalUrl string    `db:"original_url"`
		ShortUrl    string    `db:"short_url"`
		Md5         string    `db:"md5"`
	}
)

func newUrlMapModel(conn sqlx.SqlConn) *defaultUrlMapModel {
	return &defaultUrlMapModel{
		conn:  conn,
		table: "`url_map`",
	}
}

func (m *defaultUrlMapModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUrlMapModel) FindOne(ctx context.Context, id int64) (*UrlMap, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", urlMapRows, m.table)
	var resp UrlMap
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUrlMapModel) FindOneByMd5(ctx context.Context, md5 string) (*UrlMap, error) {
	var resp UrlMap
	query := fmt.Sprintf("select %s from %s where `md5` = ? limit 1", urlMapRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, md5)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUrlMapModel) FindOneByShortUrl(ctx context.Context, shortUrl string) (*UrlMap, error) {
	var resp UrlMap
	query := fmt.Sprintf("select %s from %s where `short_url` = ? limit 1", urlMapRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, shortUrl)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUrlMapModel) Insert(ctx context.Context, data *UrlMap) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, urlMapRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CreateBy, data.IsDeleted, data.OriginalUrl, data.ShortUrl, data.Md5)
	return ret, err
}

func (m *defaultUrlMapModel) Update(ctx context.Context, newData *UrlMap) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, urlMapRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.CreateBy, newData.IsDeleted, newData.OriginalUrl, newData.ShortUrl, newData.Md5, newData.Id)
	return err
}

func (m *defaultUrlMapModel) tableName() string {
	return m.table
}
